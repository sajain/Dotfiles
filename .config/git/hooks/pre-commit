#!/usr/bin/env python2
import os
from subprocess import check_output, CalledProcessError
from collections import namedtuple


def check_flake8():
    """Checks for potenatial `flake8` errors."""
    staged_files = _get_staged_files()

    retcode = True

    flake8_error_files = []
    for staged_file in staged_files:
        cmd = 'flake8 {}'.format(staged_file)

        try:
            check_output(cmd.split(' '))
        except CalledProcessError:
            retcode = False
            flake8_error_files.append(staged_file)

    if flake8_error_files:
        print 'flake8 errors in following files {}'.format(flake8_error_files)

    return retcode


def check_isort():
    """Ensures that there are no isort errors."""

    staged_files = _get_staged_files()

    retcode = True

    isort_corrected_files = []

    for staged_file in staged_files:
        cmd = 'isort {} --check'.format(staged_file)
        try:
            check_output(cmd.split(' '))
        except CalledProcessError:
            retcode = False
            isort_corrected_files.append(staged_file)

            cmd = 'isort {}'.format(staged_file)
            check_output(cmd.split(' '))

    if isort_corrected_files:
        print 'isort errors in following files {}'.format(
            isort_corrected_files)

    return retcode


def check_debug():
    """Ensures that there are no debug statements."""

    staged_files = _get_staged_files()

    retcode = True

    for staged_file in staged_files:
        with open(staged_file, 'rb') as input_file:
            for i, line in enumerate(input_file):
                if line.find('sjdebug') != -1 or line.find('SJDEBUG') != -1:
                    print 'File {0} contains sjdebug statement at line {1}'.\
                        format(staged_file, i)
                    retcode = False

    return retcode


def check_pep8():
    """Automatic pep8 corrections using `autopep8` library."""

    retcode = True

    diff_patch_cmd = 'git diff --staged --unified=0'
    diff_patch = check_output(diff_patch_cmd.split(' '))
    diff_patch = diff_patch.split('\n')

    Patch = namedtuple(
        'Patch', 'file_name line_start line_end', verbose=False)
    patches = []
    current_hunk_filename = ''
    for line in diff_patch:
        if line.startswith('+++'):
            current_hunk_filename = '.' + line[5:]

        if line.startswith('@@'):
            line_range = line.split(' ')[2]
            line_range = line_range.split(',')
            line_start = int(line_range[0])
            if len(line_range) > 1:
                line_end = line_start + int(line_range[1])
            else:
                line_end = line_start

            patch = Patch(current_hunk_filename, line_start, line_end)
            patches.append(patch)

    files_changed = set()
    python_patches = filter(lambda x: x.file_name.endswith('.py'), patches)

    for patch in python_patches:
        autopep8_cmd = [
            'autopep8', '--in-place', '--line-range',
            str(patch.line_start), str(patch.line_end), patch.file_name]

        check_output(autopep8_cmd)
        git_diff_cmd = 'git diff ' + patch.file_name
        changed_diff = check_output(git_diff_cmd.split(' '))
        if changed_diff:
            files_changed.add(patch.file_name)
            retcode = False

    if files_changed:
        print 'pep8 errors in files autocorrected'
        for f in files_changed:
            print f
    return retcode


def _get_staged_files():
    cmd = 'git diff --staged --name-only'
    staged_files = check_output(cmd.split(' '))
    staged_files = staged_files.split('\n')
    staged_files = filter(lambda x: bool(x), staged_files)

    # filter out directories
    staged_files = filter(lambda x: os.path.isfile(x), staged_files)

    return staged_files


if __name__ == '__main__':

    ret_debug = check_debug()
    if ret_debug is False:
        print '**********************'
        print 'Aborting git commit. Remove `sjdebug` statements from code'
        exit(1)

    ret_check_pep8 = check_pep8()
    if ret_check_pep8 is False:
        print '**********************'
        print (
            'Aborting git commit. pep8 errors autoformatted. Run `git add` on '
            'autoformatted files')
        exit(1)

    ret_isort = check_isort()
    if ret_isort is False:
        print '**********************'
        print (
            'Aborting git commit. `isort` errors autocorrected. Run `git add` '
            'on autoformatted files')
        exit(1)

    ret_flake8 = check_flake8()
    if ret_flake8 is False:
        print '**********************'
        print ('Aborting git commit. `flake8` errors detected.')
        exit(1)
